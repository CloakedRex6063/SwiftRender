add_subdirectory(GLM)
target_link_libraries(SwiftRender PUBLIC glm::glm)

add_subdirectory(VMA)
target_link_libraries(SwiftRender PUBLIC GPUOpen::VulkanMemoryAllocator)

add_subdirectory(DDS)
target_compile_definitions(SwiftRender PUBLIC DDS_USE_STD_FILESYSTEM DDS_CPP_17)
target_link_libraries(SwiftRender PRIVATE dds_image)
target_include_directories(SwiftRender PUBLIC DDS/include)

find_package(Vulkan REQUIRED)
if(Vulkan_FOUND)
    message(STATUS "Vulkan SDK is installed")
    target_compile_definitions(SwiftRender PUBLIC SWIFT_VULKAN_SDK VULKAN_HPP_NO_EXCEPTIONS)
    target_link_libraries(SwiftRender PUBLIC Vulkan::Vulkan)
    if(CMAKE_BUILD_TYPE STREQUAL "Debug")
        message(STATUS "Enabling validation layers")
        target_compile_definitions(SwiftRender PUBLIC SWIFT_VULKAN_VALIDATION)
    endif ()
else()
    message(FATAL_ERROR "Vulkan SDK not found!")
endif()

if (SwiftImGui)
    FILE(GLOB ImGuiSources ImGUI/*.cpp)
    add_library(imgui ${ImGuiSources})
    target_include_directories(imgui PUBLIC ImGui ImGui/backends)
    target_link_libraries(imgui PUBLIC Vulkan::Vulkan)
    target_sources(imgui PUBLIC ImGui/backends/imgui_impl_vulkan.cpp ImGui/backends/imgui_impl_glfw.cpp)
endif ()

if (SwiftImGuiGLFW)
    target_link_libraries(imgui PUBLIC glfw)
endif ()
target_link_libraries(SwiftRender PUBLIC imgui)